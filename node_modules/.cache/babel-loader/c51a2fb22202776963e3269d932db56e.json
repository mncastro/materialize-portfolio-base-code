{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Infecter_1 = require(\"./Particle/Infecter\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    this.misplaced = false;\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.noiseDelay = Utils_1.NumberUtils.getValue(this.options.move.noise.delay) * 1000;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n    this.size = {\n      value: sizeValue\n    };\n    this.direction = this.options.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: (rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const sizeAnimation = this.options.size.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomSize) {\n        switch (sizeAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.size.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.color = {\n      value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates)\n    };\n    const colorAnimation = this.options.color.animation;\n\n    if (colorAnimation.enable) {\n      this.color.velocity = colorAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!colorAnimation.sync) {\n        this.color.velocity *= Math.random();\n      }\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = {\n      x: this.position.x,\n      y: this.position.y\n    };\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    const opacityOptions = this.options.opacity;\n    const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n    this.opacity = {\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomOpacity) {\n        switch (opacityAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.opacity.value = opacityAnimation.minimumValue;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.opacity.value = Utils_1.NumberUtils.randomInRange(opacityAnimation.minimumValue, this.opacity.value);\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.opacity.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    this.strokeColor = {\n      value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value\n    };\n\n    if (typeof this.stroke.color !== \"string\") {\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        if (strokeColorAnimation.enable) {\n          this.strokeColor.velocity = strokeColorAnimation.speed / 100 * container.retina.reduceFactor;\n\n          if (!strokeColorAnimation.sync) {\n            this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\n          }\n        } else {\n          this.strokeColor.velocity = 0;\n        }\n\n        if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\n          this.strokeColor.value.h = Math.random() * 360;\n        }\n      }\n    }\n\n    const lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y\n    };\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getFillColor() {\n    var _a;\n\n    return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n  }\n\n  calcPosition(container, position, tryCount = 0) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Utils_1.Utils.deepExtend({}, pluginPos);\n      }\n    }\n\n    const pos = {\n      x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n      y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n    };\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\n    const res = {\n      horizontal: 0,\n      vertical: 0\n    };\n    const moveOptions = this.options.move;\n    let rad;\n    let radOffset = Math.PI / 4;\n\n    if (typeof moveOptions.angle === \"number\") {\n      rad = Math.PI / 180 * moveOptions.angle;\n    } else {\n      rad = Math.PI / 180 * moveOptions.angle.value;\n      radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    }\n\n    const range = {\n      left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n      right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n    };\n\n    if (moveOptions.straight) {\n      res.horizontal = baseVelocity.x;\n      res.vertical = baseVelocity.y;\n\n      if (moveOptions.random) {\n        res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n        res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n      }\n    } else {\n      res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n      res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: image,\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/mcastro/Code/Tutorials/materialize-portfolio/node_modules/tsparticles/dist/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","Particles_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastNoiseTime","destroyed","misplaced","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","Particles","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","noiseDelay","NumberUtils","getValue","move","noise","delay","initParticle","color","sizeOptions","size","sizeValue","randomSize","random","enable","direction","bubble","inRange","initialVelocity","calculateVelocity","velocity","horizontal","vertical","pathAngle","Math","atan2","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","status","AnimationStatus","decreasing","increasing","rotateAnimation","animation","speed","reduceFactor","sync","sizeAnimation","startValue","StartValueType","min","minimumValue","randomInRange","max","sizeAnimationSpeed","ColorUtils","colorToHsl","colorAnimation","calcPosition","initialPosition","x","y","offset","opacityOptions","opacity","randomOpacity","opacityAnimation","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeColor","strokeColorAnimation","h","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","delta","update","draw","canvas","drawParticle","getPosition","getRadius","radius","getFillColor","getStrokeColor","destroy","tryCount","plugin","plugins","pluginPos","particlePosition","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","angle","range","left","sin","right","cos","straight","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nclass Particle {\n    constructor(id, container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastNoiseTime = 0;\n        this.destroyed = false;\n        this.misplaced = false;\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new Particles_1.Particles();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                        : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.noiseDelay = Utils_1.NumberUtils.getValue(this.options.move.noise.delay) * 1000;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n        const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n        this.size = {\n            value: sizeValue,\n        };\n        this.direction = this.options.move.direction;\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = {\n            horizontal: this.initialVelocity.horizontal,\n            vertical: this.initialVelocity.vertical,\n        };\n        this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: ((rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const sizeAnimation = this.options.size.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            if (!randomSize) {\n                switch (sizeAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.size.value = sizeAnimation.minimumValue * pxRatio;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.size.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.color = {\n            value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates),\n        };\n        const colorAnimation = this.options.color.animation;\n        if (colorAnimation.enable) {\n            this.color.velocity = (colorAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!colorAnimation.sync) {\n                this.color.velocity *= Math.random();\n            }\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.initialPosition = {\n            x: this.position.x,\n            y: this.position.y,\n        };\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        const opacityOptions = this.options.opacity;\n        const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n        this.opacity = {\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            if (!randomOpacity) {\n                switch (opacityAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.opacity.value = opacityAnimation.minimumValue;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.opacity.value = Utils_1.NumberUtils.randomInRange(opacityAnimation.minimumValue, this.opacity.value);\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        this.strokeColor = {\n            value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value,\n        };\n        if (typeof this.stroke.color !== \"string\") {\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                if (strokeColorAnimation.enable) {\n                    this.strokeColor.velocity = (strokeColorAnimation.speed / 100) * container.retina.reduceFactor;\n                    if (!strokeColorAnimation.sync) {\n                        this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\n                    }\n                }\n                else {\n                    this.strokeColor.velocity = 0;\n                }\n                if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\n                    this.strokeColor.value.h = Math.random() * 360;\n                }\n            }\n        }\n        const lifeOptions = particlesOptions.life;\n        this.lifeDelay = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeDelayTime = 0;\n        this.lifeDuration = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeTime = 0;\n        this.livesRemaining = particlesOptions.life.count;\n        this.spawning = this.lifeDelay > 0;\n        if (this.lifeDuration <= 0) {\n            this.lifeDuration = -1;\n        }\n        if (this.livesRemaining <= 0) {\n            this.livesRemaining = -1;\n        }\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.infecter = new Infecter_1.Infecter(container);\n        this.mover = new Mover_1.Mover(container, this);\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getFillColor() {\n        var _a;\n        return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n    }\n    calcPosition(container, position, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Utils_1.Utils.deepExtend({}, pluginPos);\n            }\n        }\n        const pos = {\n            x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n            y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height,\n        };\n        const outMode = this.options.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\n        const res = {\n            horizontal: 0,\n            vertical: 0,\n        };\n        const moveOptions = this.options.move;\n        let rad;\n        let radOffset = Math.PI / 4;\n        if (typeof moveOptions.angle === \"number\") {\n            rad = (Math.PI / 180) * moveOptions.angle;\n        }\n        else {\n            rad = (Math.PI / 180) * moveOptions.angle.value;\n            radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        }\n        const range = {\n            left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n            right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2),\n        };\n        if (moveOptions.straight) {\n            res.horizontal = baseVelocity.x;\n            res.vertical = baseVelocity.y;\n            if (moveOptions.random) {\n                res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n                res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n            }\n        }\n        else {\n            res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n            res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: image,\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}