{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n    const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    this.applyNoise(delta);\n    const gravityOptions = particlesOptions.move.gravity;\n\n    if (gravityOptions.enable) {\n      particle.velocity.vertical += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n    }\n\n    const velocity = {\n      horizontal: particle.velocity.horizontal * moveSpeed,\n      vertical: particle.velocity.vertical * moveSpeed\n    };\n\n    if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n      velocity.vertical = gravityOptions.maxSpeed;\n      particle.velocity.vertical = velocity.vertical / moveSpeed;\n    }\n\n    particle.position.x += velocity.horizontal;\n    particle.position.y += velocity.vertical;\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n        particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.horizontal < 0 || particle.position.x > initialPosition.x && particle.velocity.horizontal > 0) {\n          particle.velocity.horizontal *= -Math.random();\n        }\n\n        if (particle.position.y < initialPosition.y && particle.velocity.vertical < 0 || particle.position.y > initialPosition.y && particle.velocity.vertical > 0) {\n          particle.velocity.vertical *= -Math.random();\n        }\n      }\n    }\n  }\n\n  applyNoise(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    const noiseOptions = particlesOptions.move.noise;\n    const noiseEnabled = noiseOptions.enable;\n\n    if (!noiseEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastNoiseTime <= particle.noiseDelay) {\n      particle.lastNoiseTime += delta.value;\n      return;\n    }\n\n    const noise = container.noise.generate(particle);\n    particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n    particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n    particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n    particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n    particle.lastNoiseTime -= particle.noiseDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/mcastro/Code/Tutorials/materialize-portfolio/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","constructor","container","particle","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","reduceFactor","maxSize","sizeValue","sizeFactor","size","getRadius","factor","applyNoise","gravityOptions","gravity","velocity","vertical","acceleration","horizontal","maxSpeed","position","x","y","vibrate","Math","sin","cos","initialPosition","initialDistance","NumberUtils","getDistance","maxDistance","misplaced","random","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","generate","angle","length","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,KAAN,CAAY;AACRI,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAC7B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACR,UAAMF,QAAQ,GAAG,KAAKA,QAAtB;AACAA,IAAAA,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,GAA0B,KAA1B;AACAJ,IAAAA,QAAQ,CAACK,KAAT,GAAiB,EAAjB;;AACA,SAAK,MAAM,GAAGC,MAAH,CAAX,IAAyB,KAAKP,SAAL,CAAeQ,OAAxC,EAAiD;AAC7C,UAAIP,QAAQ,CAACQ,SAAb,EAAwB;AACpB;AACH;;AACD,UAAIF,MAAM,CAACG,cAAX,EAA2B;AACvBH,QAAAA,MAAM,CAACG,cAAP,CAAsBT,QAAtB,EAAgCE,KAAhC;AACH;AACJ;;AACD,QAAIF,QAAQ,CAACQ,SAAb,EAAwB;AACpB;AACH;;AACD,SAAKE,YAAL,CAAkBR,KAAlB;AACA,SAAKS,YAAL;AACH;;AACDD,EAAAA,YAAY,CAACR,KAAD,EAAQ;AAChB,QAAIU,EAAJ,EAAQC,EAAR;;AACA,UAAMb,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMc,gBAAgB,GAAGd,QAAQ,CAACe,OAAlC;;AACA,QAAI,CAACD,gBAAgB,CAACb,IAAjB,CAAsBe,MAA3B,EAAmC;AAC/B;AACH;;AACD,UAAMjB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMkB,UAAU,GAAG,KAAKC,uBAAL,EAAnB;AACA,UAAMC,SAAS,GAAG,CAAC,CAACP,EAAE,GAAGZ,QAAQ,CAACoB,SAAf,MAA8B,IAA9B,IAAsCR,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2Db,SAAS,CAACsB,MAAV,CAAiBD,SAA7E,IAA0FrB,SAAS,CAACsB,MAAV,CAAiBC,YAA7H;AACA,UAAMC,OAAO,GAAG,CAACV,EAAE,GAAGb,QAAQ,CAACwB,SAAf,MAA8B,IAA9B,IAAsCX,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2Dd,SAAS,CAACsB,MAAV,CAAiBG,SAA5F;AACA,UAAMC,UAAU,GAAGX,gBAAgB,CAACb,IAAjB,CAAsByB,IAAtB,GAA6B1B,QAAQ,CAAC2B,SAAT,KAAuBJ,OAApD,GAA8D,CAAjF;AACA,UAAMH,SAAS,GAAID,SAAS,GAAG,CAAb,GAAkBM,UAAlB,GAA+BR,UAA/B,GAA4Cf,KAAK,CAAC0B,MAApE;AACA,SAAKC,UAAL,CAAgB3B,KAAhB;AACA,UAAM4B,cAAc,GAAGhB,gBAAgB,CAACb,IAAjB,CAAsB8B,OAA7C;;AACA,QAAID,cAAc,CAACd,MAAnB,EAA2B;AACvBhB,MAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,IAA+BH,cAAc,CAACI,YAAf,GAA8BhC,KAAK,CAAC0B,MAArC,IAAgD,KAAKR,SAArD,CAA9B;AACH;;AACD,UAAMY,QAAQ,GAAG;AACbG,MAAAA,UAAU,EAAEnC,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+Bf,SAD9B;AAEba,MAAAA,QAAQ,EAAEjC,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6Bb;AAF1B,KAAjB;;AAIA,QAAIU,cAAc,CAACd,MAAf,IAAyBgB,QAAQ,CAACC,QAAT,IAAqBH,cAAc,CAACM,QAA7D,IAAyEN,cAAc,CAACM,QAAf,GAA0B,CAAvG,EAA0G;AACtGJ,MAAAA,QAAQ,CAACC,QAAT,GAAoBH,cAAc,CAACM,QAAnC;AACApC,MAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6BD,QAAQ,CAACC,QAAT,GAAoBb,SAAjD;AACH;;AACDpB,IAAAA,QAAQ,CAACqC,QAAT,CAAkBC,CAAlB,IAAuBN,QAAQ,CAACG,UAAhC;AACAnC,IAAAA,QAAQ,CAACqC,QAAT,CAAkBE,CAAlB,IAAuBP,QAAQ,CAACC,QAAhC;;AACA,QAAInB,gBAAgB,CAACb,IAAjB,CAAsBuC,OAA1B,EAAmC;AAC/BxC,MAAAA,QAAQ,CAACqC,QAAT,CAAkBC,CAAlB,IAAuBG,IAAI,CAACC,GAAL,CAAS1C,QAAQ,CAACqC,QAAT,CAAkBC,CAAlB,GAAsBG,IAAI,CAACE,GAAL,CAAS3C,QAAQ,CAACqC,QAAT,CAAkBE,CAA3B,CAA/B,CAAvB;AACAvC,MAAAA,QAAQ,CAACqC,QAAT,CAAkBE,CAAlB,IAAuBE,IAAI,CAACE,GAAL,CAAS3C,QAAQ,CAACqC,QAAT,CAAkBE,CAAlB,GAAsBE,IAAI,CAACC,GAAL,CAAS1C,QAAQ,CAACqC,QAAT,CAAkBC,CAA3B,CAA/B,CAAvB;AACH;;AACD,UAAMM,eAAe,GAAG5C,QAAQ,CAAC4C,eAAjC;AACA,UAAMC,eAAe,GAAGlD,OAAO,CAACmD,WAAR,CAAoBC,WAApB,CAAgCH,eAAhC,EAAiD5C,QAAQ,CAACqC,QAA1D,CAAxB;;AACA,QAAIrC,QAAQ,CAACgD,WAAb,EAA0B;AACtB,UAAIH,eAAe,IAAI7C,QAAQ,CAACgD,WAA5B,IAA2C,CAAChD,QAAQ,CAACiD,SAAzD,EAAoE;AAChEjD,QAAAA,QAAQ,CAACiD,SAAT,GAAqBJ,eAAe,GAAG7C,QAAQ,CAACgD,WAAhD;AACAhD,QAAAA,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+BnC,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6B,CAA7B,GAAiCjC,QAAQ,CAACgC,QAAT,CAAkBG,UAAlF;AACAnC,QAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6BjC,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+B,CAA/B,GAAmCnC,QAAQ,CAACgC,QAAT,CAAkBC,QAAlF;AACH,OAJD,MAKK,IAAIY,eAAe,GAAG7C,QAAQ,CAACgD,WAA3B,IAA0ChD,QAAQ,CAACiD,SAAvD,EAAkE;AACnEjD,QAAAA,QAAQ,CAACiD,SAAT,GAAqB,KAArB;AACH,OAFI,MAGA,IAAIjD,QAAQ,CAACiD,SAAb,EAAwB;AACzB,YAAKjD,QAAQ,CAACqC,QAAT,CAAkBC,CAAlB,GAAsBM,eAAe,CAACN,CAAtC,IAA2CtC,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+B,CAA3E,IACCnC,QAAQ,CAACqC,QAAT,CAAkBC,CAAlB,GAAsBM,eAAe,CAACN,CAAtC,IAA2CtC,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+B,CAD/E,EACmF;AAC/EnC,UAAAA,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,IAAgC,CAACM,IAAI,CAACS,MAAL,EAAjC;AACH;;AACD,YAAKlD,QAAQ,CAACqC,QAAT,CAAkBE,CAAlB,GAAsBK,eAAe,CAACL,CAAtC,IAA2CvC,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6B,CAAzE,IACCjC,QAAQ,CAACqC,QAAT,CAAkBE,CAAlB,GAAsBK,eAAe,CAACL,CAAtC,IAA2CvC,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6B,CAD7E,EACiF;AAC7EjC,UAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,IAA8B,CAACQ,IAAI,CAACS,MAAL,EAA/B;AACH;AACJ;AACJ;AACJ;;AACDrB,EAAAA,UAAU,CAAC3B,KAAD,EAAQ;AACd,UAAMF,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMc,gBAAgB,GAAGd,QAAQ,CAACe,OAAlC;AACA,UAAMoC,YAAY,GAAGrC,gBAAgB,CAACb,IAAjB,CAAsBmD,KAA3C;AACA,UAAMC,YAAY,GAAGF,YAAY,CAACnC,MAAlC;;AACA,QAAI,CAACqC,YAAL,EAAmB;AACf;AACH;;AACD,UAAMtD,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAIC,QAAQ,CAACsD,aAAT,IAA0BtD,QAAQ,CAACuD,UAAvC,EAAmD;AAC/CvD,MAAAA,QAAQ,CAACsD,aAAT,IAA0BpD,KAAK,CAACT,KAAhC;AACA;AACH;;AACD,UAAM2D,KAAK,GAAGrD,SAAS,CAACqD,KAAV,CAAgBI,QAAhB,CAAyBxD,QAAzB,CAAd;AACAA,IAAAA,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,IAAgCM,IAAI,CAACE,GAAL,CAASS,KAAK,CAACK,KAAf,IAAwBL,KAAK,CAACM,MAA9D;AACA1D,IAAAA,QAAQ,CAACgC,QAAT,CAAkBG,UAAlB,GAA+BxC,OAAO,CAACmD,WAAR,CAAoBa,KAApB,CAA0B3D,QAAQ,CAACgC,QAAT,CAAkBG,UAA5C,EAAwD,CAAC,CAAzD,EAA4D,CAA5D,CAA/B;AACAnC,IAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,IAA8BQ,IAAI,CAACC,GAAL,CAASU,KAAK,CAACK,KAAf,IAAwBL,KAAK,CAACM,MAA5D;AACA1D,IAAAA,QAAQ,CAACgC,QAAT,CAAkBC,QAAlB,GAA6BtC,OAAO,CAACmD,WAAR,CAAoBa,KAApB,CAA0B3D,QAAQ,CAACgC,QAAT,CAAkBC,QAA5C,EAAsD,CAAC,CAAvD,EAA0D,CAA1D,CAA7B;AACAjC,IAAAA,QAAQ,CAACsD,aAAT,IAA0BtD,QAAQ,CAACuD,UAAnC;AACH;;AACD5C,EAAAA,YAAY,GAAG;AACX,UAAMZ,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMgB,OAAO,GAAGhB,SAAS,CAAC6D,aAA1B;;AACA,QAAIjE,OAAO,CAACkE,KAAR,CAAcC,KAAd,MAAyB,CAAC/C,OAAO,CAACgD,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8ClD,MAA5E,EAAoF;AAChF;AACH;;AACD,UAAMhB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMmE,aAAa,GAAGpD,OAAO,CAACgD,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CE,KAApE;AACA,UAAMC,QAAQ,GAAGtE,SAAS,CAACgE,aAAV,CAAwBO,KAAxB,CAA8BjC,QAA/C;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX;AACH;;AACD,UAAME,YAAY,GAAG;AACjBjC,MAAAA,CAAC,EAAEvC,SAAS,CAACyE,MAAV,CAAiB9C,IAAjB,CAAsB+C,KAAtB,GAA8B,CADhB;AAEjBlC,MAAAA,CAAC,EAAExC,SAAS,CAACyE,MAAV,CAAiB9C,IAAjB,CAAsBgD,MAAtB,GAA+B;AAFjB,KAArB;AAIA,UAAMC,cAAc,GAAG5D,OAAO,CAACgD,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CU,MAArE;AACA,UAAMhD,MAAM,GAAG5B,QAAQ,CAAC2B,SAAT,KAAuBwC,aAAtC;AACA,UAAMU,GAAG,GAAG;AACRvC,MAAAA,CAAC,EAAE,CAAC+B,QAAQ,CAAC/B,CAAT,GAAaiC,YAAY,CAACjC,CAA3B,IAAgCV,MAD3B;AAERW,MAAAA,CAAC,EAAE,CAAC8B,QAAQ,CAAC9B,CAAT,GAAagC,YAAY,CAAChC,CAA3B,IAAgCX;AAF3B,KAAZ;AAIA5B,IAAAA,QAAQ,CAAC8E,MAAT,CAAgBxC,CAAhB,IAAqB,CAACuC,GAAG,CAACvC,CAAJ,GAAQtC,QAAQ,CAAC8E,MAAT,CAAgBxC,CAAzB,IAA8BqC,cAAnD;AACA3E,IAAAA,QAAQ,CAAC8E,MAAT,CAAgBvC,CAAhB,IAAqB,CAACsC,GAAG,CAACtC,CAAJ,GAAQvC,QAAQ,CAAC8E,MAAT,CAAgBvC,CAAzB,IAA8BoC,cAAnD;AACH;;AACDzD,EAAAA,uBAAuB,GAAG;AACtB,UAAMnB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMgB,OAAO,GAAGhB,SAAS,CAAC6D,aAA1B;AACA,UAAMmB,MAAM,GAAGpF,OAAO,CAACkE,KAAR,CAAcmB,SAAd,CAAwBnF,OAAO,CAACoF,SAAR,CAAkBC,IAA1C,EAAgDnE,OAAO,CAACgD,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCkB,IAArF,CAAf;;AACA,QAAI,CAACJ,MAAL,EAAa;AACT,aAAO,CAAP;AACH;;AACD,UAAMV,QAAQ,GAAG,KAAKtE,SAAL,CAAegE,aAAf,CAA6BO,KAA7B,CAAmCjC,QAApD;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX,aAAO,CAAP;AACH;;AACD,UAAMe,WAAW,GAAG,KAAKpF,QAAL,CAAcqF,WAAd,EAApB;AACA,UAAMC,IAAI,GAAG3F,OAAO,CAACmD,WAAR,CAAoBC,WAApB,CAAgCsB,QAAhC,EAA0Ce,WAA1C,CAAb;AACA,UAAMG,MAAM,GAAGxF,SAAS,CAACsB,MAAV,CAAiBmE,cAAhC;;AACA,QAAIF,IAAI,GAAGC,MAAX,EAAmB;AACf,aAAO,CAAP;AACH;;AACD,UAAME,eAAe,GAAGH,IAAI,GAAGC,MAAP,IAAiB,CAAzC;AACA,UAAMtE,UAAU,GAAGF,OAAO,CAACgD,aAAR,CAAsB2B,KAAtB,CAA4BR,IAA5B,CAAiCtD,MAApD;AACA,WAAO6D,eAAe,GAAGxE,UAAzB;AACH;;AA/IO;;AAiJZzB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n        const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        this.applyNoise(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        if (gravityOptions.enable) {\n            particle.velocity.vertical += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n        }\n        const velocity = {\n            horizontal: particle.velocity.horizontal * moveSpeed,\n            vertical: particle.velocity.vertical * moveSpeed,\n        };\n        if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.vertical = gravityOptions.maxSpeed;\n            particle.velocity.vertical = velocity.vertical / moveSpeed;\n        }\n        particle.position.x += velocity.horizontal;\n        particle.position.y += velocity.vertical;\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n                particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.horizontal < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.horizontal > 0)) {\n                    particle.velocity.horizontal *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.vertical < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.vertical > 0)) {\n                    particle.velocity.vertical *= -Math.random();\n                }\n            }\n        }\n    }\n    applyNoise(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const noiseOptions = particlesOptions.move.noise;\n        const noiseEnabled = noiseOptions.enable;\n        if (!noiseEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastNoiseTime <= particle.noiseDelay) {\n            particle.lastNoiseTime += delta.value;\n            return;\n        }\n        const noise = container.noise.generate(particle);\n        particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n        particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n        particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n        particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n        particle.lastNoiseTime -= particle.noiseDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}